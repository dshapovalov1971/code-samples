variables:
- group: ${{ variables['Build.SourceBranchName'] }}
- name: templateFile
  value: ciam.bicep
- name: pipelineFile
  value: ciam-pipeline.yml

trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - ciam.bicep
    - ciam-app-config.json
    - ciam-pipeline.yml
    - emailtemplates
    - email-header.html
    - email-footer.html
    - replacements
    - logic-app

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  persistCredentials: true

- bash: |    
    sed -i -e "$(jq -nrc --slurpfile v <(grep -Po "^- task:\s*?.*" $(pipelineFile) | grep -Po "[\S]+@[\S]+?" | sed -e 's/^/{"o":"/g;s/$/"}/g') \
      --slurpfile rv <(curl -s --fail-with-body https://raw.githubusercontent.com/MicrosoftDocs/azure-devops-yaml-schema/main/task-reference/TOC.yml | yq -o=j -I=0 '.items[].items[0].name | split("@")') \
      '$v | unique | map(.r = (.o | split("@")[0] as $t | $t + "@" + ($rv | map(select(.[0] == $t)) | first | .[1])) | select(.r != .o)) | map("s|"+.o+"|"+.r+"|g") | join(";")')" $(pipelineFile)
  condition: eq(variables['Build.SourceBranchName'], 'dev')
  name: TaskVersions
  displayName: Task Versions

- task: AzureCLI@2
  name: ProviderVersions
  condition: eq(variables['Build.SourceBranchName'], 'dev')
  displayName: Provider Versions
  inputs:
    azureSubscription: $(ciamServiceConnection)
    scriptType: bash
    scriptLocation: inlineScript
    failOnStandardError: true
    inlineScript: |
      sed -i -e "$(az provider list --query '[].{namespace: namespace,resourceTypes: resourceTypes[].{resourceType: resourceType, apiVersion: apiVersions[] | [?length(@)==`10`] | [0]}}' |
        jq -rc --slurpfile v <(grep -Po "resource .+? '[^']+?'" $(templateFile) | grep -Po "(?<=').*(?=')" | sed -e 's/^/{"o":"/g;s/$/"}/g') \
          '. as $rv | $v | unique | map(.r = (.o | split("/")[0] as $ns | (split("@")[0] | split("/")[1:] | join("/")) as $rt | $ns + "/" + $rt + "@" + ($rv[] | select(.namespace == $ns).resourceTypes[] | select(.resourceType == $rt).apiVersion)) | select(.r != .o)) | map("s|"+.o+"|"+.r+"|g") | join(";")')" $(templateFile)

- bash: |
    if [[ `git status --porcelain` ]]; then
      git config --global user.email 'devops@build.pipeline'
      git config --global user.name 'Devops Pipeline'
      git add --all
      git commit -m 'Devops Pipeline [skip ci]'
      git push origin HEAD:$(Build.SourceBranchName)
    fi
  condition: eq(variables['Build.SourceBranchName'], 'dev')
  name: CommitChanges
  displayName: Commit Changes

- bash: |
    az bicep build --file $(templateFile)
    parentSite=$(cat cdc/parentSite)
    echo "##vso[task.setvariable variable=cdcApiKey]$(curl -s --fail-with-body \
        --data-urlencode userKey=$(cdcAppKey) \
        --data-urlencode secret=$(cdcAppSecret) \
        -d targetPartnerID=$(cdcPartnerId) \
        -d httpStatusCodes=true \
        https://admin.$(cdcDC)/admin.getPartnerSites |
      jq -rc '.sites[] | select(.name == "'$(echo ${parentSite/"{{env}}"/$(Build.SourceBranchName)} | jq -Rr --slurpfile dict cdc/siteNameOverrides 'INDEX($dict[]; .o) as $d | ($d[.]|.r) // . ')'").apiKey')"
  name: LintBicepCode
  displayName: Run Bicep Linter

- task: AzureCLI@2
  name: RunPreflightValidation
  displayName: Run Preflight Validation
  inputs:
    azureSubscription: $(ciamServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    failOnStandardError: true
    inlineScript: |
      az deployment group validate -g $(ciamResourceGroupName) -f $(templateFile) --only-show-errors

- task: AzureCLI@2
  name: Deploy
  displayName: Deploy to Azure
  inputs:
    azureSubscription: $(ciamServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    failOnStandardError: true
    inlineScript: |
      sed -i -e "$(jq -nrc --slurpfile r replacements '$r | map(select(.e=="'$(Build.SourceBranchName)'") | "s/{{"+.n+"}}/"+.r+"/g") | join(";")')" $(templateFile)
      az deployment group create -n $(Build.BuildNumber)  -g $(ciamResourceGroupName) -f $(templateFile) --only-show-errors
      (cd logic-app; zip -r ../deploy.zip *)
      lapp="$(echo $(ciamResourceGroupName) | sed 's/RG/LApp/; s/[^-]*$/LogicApp/')"
      az logicapp deployment source config-zip -g "$(ciamResourceGroupName)" -n "$lapp" --src deploy.zip --only-show-errors

- task: AzureCLI@2
  name: WriteAppConfig
  displayName: Write App Config
  inputs:
    azureSubscription: $(ciamServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    failOnStandardError: true
    inlineScript: |
      sed -i -e "$(jq -nrc --slurpfile r replacements '$r | map(select(.e=="'$(Build.SourceBranchName)'") | "s/{{"+.n+"}}/"+.r+"/g") | join(";")')" ciam-app-config.json
      az appconfig kv import -y -n $(echo $(ciamResourceGroupName) | sed 's/RG/CS/; s/[^-]*$/AppConfig/') -s file --format json \
        --path ciam-app-config.json --profile appconfig/kvset --import-mode all --only-show-errors

- task: AzureCLI@2
  name: UploadEmailTemplates
  displayName: Upload Email Templates
  inputs:
    azureSubscription: $(ciamServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    failOnStandardError: true
    inlineScript: |
      mkdir -p emailtemplates
      find ./emailtemplates -type f -exec perl -i -0777pe '$h=`cat email-header.html`; $f=`cat email-footer.html`; s/(?<=<!-- BEGIN HEADER -->)(.|\n)+?(?=<!-- END HEADER -->)/$h/; s/(?<=<!-- BEGIN FOOTER -->)(.|\n)+?(?=<!-- END FOOTER -->)/$f/;s/{{current-year}}/'$(date +%Y)'/g;'"$(jq -nrc --slurpfile r replacements '$r | map(select(.e=="$(Build.SourceBranchName)") | "s/{{"+.n+"}}/"+.r+"/g") | join(";")')" {} \;
      az storage blob upload-batch --account-name $(echo $(ciamResourceGroupName) | sed 's/RG/st/; s/[^-]*$/storage/; s/-/1/g; s/.*/\L&/') \
        -d emailtemplates -s ./emailtemplates --overwrite --no-progress --only-show-errors

- task: AzureCLI@2
  name: SetEmailUrlCdcVariable
  displayName: Set Email URL CDC Variable
  inputs:
    azureSubscription: $(ciamServiceConnection)
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    failOnStandardError: true
    inlineScript: |
      curl -s --fail-with-body \
          -d apiKey=$(cdcApiKey) \
          --data-urlencode userKey=$(cdcAppKey) \
          --data-urlencode secret=$(cdcAppSecret) \
          -d name=sendEmailURL \
          -d type=string \
          --data-urlencode value="$(az rest --query "value" -otsv --method post --uri https://management.azure.com/subscriptions/$(az account show --query "id" -otsv)/resourceGroups/$(ciamResourceGroupName)/providers/Microsoft.Web/sites/$(echo $(ciamResourceGroupName) | sed 's/RG/LApp/; s/[^-]*$/LogicApp/')/hostruntime/runtime/webhooks/workflow/api/management/workflows/EmailNotification/triggers/manual/listCallbackUrl?api-version=2018-11-01)" \
          -d httpStatusCodes=true \
          https://idx.$(cdcDC)/idx.setGlobalVariable 
